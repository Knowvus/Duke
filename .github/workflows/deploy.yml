name: Build and Deploy Docker Image

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build project
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release

      - name: Run tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --release

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/duke:latest
            ${{ secrets.DOCKER_HUB_USERNAME }}/duke:${{ github.sha }}

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to DigitalOcean Droplet
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DIGITALOCEAN_DROPLET_IP }}
          username: root
          password: ${{ secrets.DUKE_ROOT_PASSWORD }}
          script: |
            # Pull the latest image
            docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/duke:${{ github.sha }}

            # Stop and remove any existing Duke container
            if [ $(docker ps -a -q -f name=duke) ]; then
              docker stop duke || true
              docker rm duke || true
            fi

            # Determine the port to use
            PORT=8080
            if lsof -i :8080; then
              echo "Port 8080 is in use, switching to port 8081..."
              PORT=8081
            fi

            # Run the new Duke container on the determined port
            echo "Starting Duke container on port $PORT..."
            docker run -d -p $PORT:8080 --name duke ${{ secrets.DOCKER_HUB_USERNAME }}/duke:${{ github.sha }}

            # Verify that the Duke container is running
            sleep 5
            if [ $(docker ps -q -f name=duke) ]; then
              echo "Duke container is running successfully on port $PORT."
            else
              echo "Duke container failed to start."
              exit 1
            fi

            # Optional: Tail the logs for verification
            docker logs duke
