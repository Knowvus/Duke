name: Build and Deploy Docker Image

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      # Define all necessary secrets at the top of the job
      DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
      DOCKER_HUB_PASSWORD: ${{ secrets.DOCKER_HUB_PASSWORD }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build project
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release

      - name: Run tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --release

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKER_HUB_USERNAME }}
          password: ${{ env.DOCKER_HUB_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ env.DOCKER_HUB_USERNAME }}/duke:latest
            ${{ env.DOCKER_HUB_USERNAME }}/duke:${{ github.sha }}

  deploy:
    runs-on: ubuntu-latest
    needs: build
    env:
      # Define all necessary secrets at the top of the job
      DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
      DOCKER_HUB_PASSWORD: ${{ secrets.DOCKER_HUB_PASSWORD }}
      PG_USER: ${{ secrets.PG_USER }}
      PG_PASSWORD: ${{ secrets.PG_PASSWORD }}
      PG_DATABASE: ${{ secrets.PG_DATABASE }}
      PG_PORT: ${{ secrets.PG_PORT }}
      POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
      INFISICAL_TOKEN: ${{ secrets.INFISICAL_TOKEN }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      MANAGER_IP: ${{ secrets.DO_DUKE_IP }}
    steps:
      - name: Install Docker
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKER_HUB_USERNAME }}
          password: ${{ env.DOCKER_HUB_PASSWORD }}

      - name: Pull Docker Image
        run: docker pull ${{ env.DOCKER_HUB_USERNAME }}/duke:${{ github.sha }}

      - name: Stop and Remove Existing Container
        run: |
          docker ps -q --filter "name=duke" | grep -q . && docker stop duke && docker rm duke || echo "No existing container named 'duke' found."

      - name: Create Docker Network (hyperion)
        run: docker network create hyperion || echo "Network hyperion already exists."

      - name: Check PostgreSQL Availability
        run: |
          until pg_isready -h $POSTGRES_HOST -p $PG_PORT -U $PG_USER; do
            echo "Waiting for PostgreSQL to be available..."
            sleep 5
          done
        env:
          PGPASSWORD: ${{ env.PG_PASSWORD }}

      - name: Initialize Docker Swarm Manager
        run: |
          docker swarm init
          MANAGER_TOKEN=$(docker swarm join-token -q manager)
          echo "::set-output name=manager_token::${MANAGER_TOKEN}"

      - name: Save Swarm Join Token to Infisical
        if: ${{ env.INFISICAL_TOKEN }}
        run: |
          curl -s https://infisical.com/install.sh | bash
          infisical secrets set DOCKER_SWARM_MANAGER_TOKEN --body "${{ steps.deploy.outputs.manager_token }}"

      - name: Sync Token to GitHub Secrets
        run: |
          TOKEN=$(infisical secrets get DOCKER_SWARM_MANAGER_TOKEN)
          gh secret set DOCKER_SWARM_MANAGER_TOKEN --body "${TOKEN}"

      - name: Run New Container with PostgreSQL Connection
        run: |
          PORT=8080
          while lsof -i :$PORT; do
            echo "Port $PORT is in use, trying the next one..."
            PORT=$((PORT+1))
          done
          docker run -d -p $PORT:8080 --name duke \
            -e RUST_BACKTRACE=full \
            -e DATABASE_URL=postgres://$PG_USER:$PG_PASSWORD@$POSTGRES_HOST:$PG_PORT/$PG_DATABASE \
            --network hyperion \
            ${{ env.DOCKER_HUB_USERNAME }}/duke:${{ github.sha }}

      - name: Check if Duke Container is Running
        run: |
          sleep 5
          docker ps -q --filter "name=duke" || (echo "Duke container failed to start." && docker logs duke && exit 1)
          echo "Duke container is running successfully."
          docker logs duke
