name: Build and Deploy Docker Image

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build project
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release

      - name: Run tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --release

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/duke:latest
            ${{ secrets.DOCKER_HUB_USERNAME }}/duke:${{ github.sha }}

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Install Docker
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Pull Docker Image
        run: docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/duke:${{ github.sha }}

      - name: Stop and Remove Existing Container
        run: |
          docker ps -q --filter "name=duke" | grep -q . && docker stop duke && docker rm duke || echo "No existing container named 'duke' found."

      - name: Create Docker Network
        run: docker network create app_network || echo "Network app_network already exists."

      - name: Run New Container with PostgreSQL Connection
        run: |
          PORT=8080
          while lsof -i :$PORT; do
            echo "Port $PORT is in use, trying the next one..."
            PORT=$((PORT+1))
          done
          docker run -d -p $PORT:8080 --name duke \
            -e RUST_BACKTRACE=full \
            -e DATABASE_URL=postgres://${{ secrets.PG_USER }}:${{ secrets.PG_PASSWORD }}@${{ secrets.DIGITALOCEAN_KERRIGAN_DROPLET_IP }}:${{ secrets.PG_PORT }}/${{ secrets.PG_DATABASE }} \
            --network app_network \
            ${{ secrets.DOCKER_HUB_USERNAME }}/duke:${{ github.sha }}

      - name: Check if Duke Container is Running
        run: |
          sleep 5
          docker ps -q --filter "name=duke" || (echo "Duke container failed to start." && docker logs duke && exit 1)
          echo "Duke container is running successfully."
          docker logs duke
