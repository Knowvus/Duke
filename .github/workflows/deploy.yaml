name: Build and Deploy Docker Image

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
      DOCKER_HUB_PASSWORD: ${{ secrets.DOCKER_HUB_PASSWORD }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build project
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release

      - name: Run tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --release

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKER_HUB_USERNAME }}
          password: ${{ env.DOCKER_HUB_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ env.DOCKER_HUB_USERNAME }}/duke:latest
            ${{ env.DOCKER_HUB_USERNAME }}/duke:${{ github.sha }}

  deploy:
    runs-on: ubuntu-latest
    needs: build
    env:
      DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
      DOCKER_HUB_PASSWORD: ${{ secrets.DOCKER_HUB_PASSWORD }}
      INFISICAL_MACHINE_IDENTITY_CLIENT_ID: ${{ secrets.INFISICAL_MACHINE_IDENTITY_CLIENT_ID }}
      INFISICAL_MACHINE_IDENTITY_CLIENT_SECRET: ${{ secrets.INFISICAL_MACHINE_IDENTITY_CLIENT_SECRET }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      MANAGER_IP: ${{ secrets.DO_DUKE_IP }}
      PROJECT_ID: ${{ secrets.PROJECT_ID }}
    steps:
      - name: Install Docker
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKER_HUB_USERNAME }}
          password: ${{ env.DOCKER_HUB_PASSWORD }}

      - name: Pull Docker Image
        run: docker pull ${{ env.DOCKER_HUB_USERNAME }}/duke:${{ github.sha }}

      - name: Stop and Remove Existing Container
        run: |
          docker ps -q --filter "name=duke" | grep -q . && docker stop duke && docker rm duke || echo "No existing container named 'duke' found."

      - name: Create Docker Network (hyperion)
        run: docker network create hyperion || echo "Network hyperion already exists."

      - name: Initialize Docker Swarm Manager
        id: swarm_init
        run: |
          docker swarm init
          echo "MANAGER_TOKEN=$(docker swarm join-token -q manager)" >> $GITHUB_ENV

      - name: Install Infisical CLI
        run: |
          curl -1sLf 'https://dl.cloudsmith.io/public/infisical/infisical-cli/setup.deb.sh' | sudo -E bash
          sudo apt-get update && sudo apt-get install -y infisical

      - name: Authenticate Machine Identity with Infisical
        run: |
          echo "INFISICAL_TOKEN"=$(infisical login --method=universal-auth --client-id=$INFISICAL_MACHINE_IDENTITY_CLIENT_ID --client-secret=$INFISICAL_MACHINE_IDENTITY_CLIENT_SECRET --silent --plain) >> $GITHUB_ENV

      - name: Verify Infisical Authentication
        run: |
          echo $INFISICAL_TOKEN || { echo "Infisical token not generated"; exit 1; }
    
      - name: Save Swarm Join Token to Infisical
        run: |
          infisical secrets set DOCKER_SWARM_MANAGER_TOKEN="${{ env.MANAGER_TOKEN }}" --token $INFISICAL_TOKEN --projectId $PROJECT_ID
          
      - name: Sync Token to GitHub Secrets
        run: |
          TOKEN=$(infisical secrets get DOCKER_SWARM_MANAGER_TOKEN --token $INFISICAL_TOKEN --projectId $PROJECT_ID)
          gh secret set DOCKER_SWARM_MANAGER_TOKEN --body "$TOKEN"
        
      - name: Run New Container
        run: |
          PORT=8080
          docker run -d -p $PORT:8080 --name duke \
            -e RUST_BACKTRACE=full \
            --network hyperion \
            ${{ env.DOCKER_HUB_USERNAME }}/duke:${{ github.sha }}

      - name: Check if Duke Container is Running
        run: |
          sleep 5
          docker ps -q --filter "name=duke" || (echo "Duke container failed to start." && docker logs duke && exit 1)
          echo "Duke container is running successfully."
          docker logs duke

