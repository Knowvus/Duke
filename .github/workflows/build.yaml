name: Build and Deploy Docker Image

on:
  workflow_dispatch:
    inputs:
      service_name:
        description: 'Service name for the Docker image'
        required: true
        default: 'duke'
      docker_username:
        description: 'Docker Hub username'
        required: true
      docker_password:
        description: 'Docker Hub password'
        required: true
      infisical_client_id:
        description: 'Infisical Client ID'
        required: true
      infisical_client_secret:
        description: 'Infisical Client Secret'
        required: true
      project_id:
        description: 'Infisical Project ID'
        required: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Build and Push Docker Image
        uses: Knowvus/.github/actions/build-and-push@main
        with:
          service_name: 'duke'
          docker_username: ${{ secrets.DOCKER_HUB_USERNAME }}
          docker_password: ${{ secrets.DOCKER_HUB_PASSWORD }}

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: SSH into Droplet and Deploy
        uses: appleboy/ssh-action@v0.1.3
        with:
          host: ${{ secrets.DO_DUKE_IP }}
          username: root
          password: ${{ secrets.DUKE_ROOT_PASSWORD }}
          script: |
            echo "Creating setup file with necessary environment variables..."
            cat <<EOF > /root/setup.env
            DOCKER_HUB_USERNAME=${{ secrets.DOCKER_HUB_USERNAME }}
            DOCKER_HUB_PASSWORD=${{ secrets.DOCKER_HUB_PASSWORD }}
            INFISICAL_MACHINE_IDENTITY_CLIENT_ID=${{ secrets.INFISICAL_MACHINE_IDENTITY_CLIENT_ID }}
            INFISICAL_MACHINE_IDENTITY_CLIENT_SECRET=${{ secrets.INFISICAL_MACHINE_IDENTITY_CLIENT_SECRET }}
            INFISICAL_PROJECT_ID=${{ secrets.PROJECT_ID }}
            SERVICE_NAME=${{ github.event.inputs.service_name }}
            EOF

            echo "Loading environment variables from setup file..."
            source /root/setup.env

            echo "Installing Infisical CLI..."
            curl -1sLf 'https://dl.cloudsmith.io/public/infisical/infisical-cli/setup.deb.sh' | sudo -E bash
            sudo apt-get update && sudo apt-get install -y infisical
            infisical --version
            echo "Infisical CLI installed successfully."

            echo "Logging into Infisical..."
            INFISICAL_TOKEN=$(infisical login --method=universal-auth --client-id=$INFISICAL_MACHINE_IDENTITY_CLIENT_ID --client-secret=$INFISICAL_MACHINE_IDENTITY_CLIENT_SECRET --plain --silent)
            if [ -z "$INFISICAL_TOKEN" ]; then
              echo "Infisical login failed. Exiting..."
              rm -f /root/setup.env
              exit 1
            fi
            echo "INFISICAL_TOKEN=$INFISICAL_TOKEN" >> /root/setup.env

            echo "Pulling the latest Docker image..."
            sudo docker pull "$DOCKER_HUB_USERNAME/$SERVICE_NAME:latest"

            echo "Stopping and removing existing Docker container..."
            sudo docker stop "$SERVICE_NAME" || true
            sudo docker rm "$SERVICE_NAME" || true

            echo "Deploying new Docker container..."
            sudo docker run -d --name "$SERVICE_NAME" --network bridge -p 8080:8080 "$DOCKER_HUB_USERNAME/$SERVICE_NAME:latest"

            echo "Leaving existing Docker Swarm if any..."
            sudo docker swarm leave --force || true

            echo "Initializing Docker Swarm..."
            sudo docker swarm init --advertise-addr ${{ secrets.DO_DUKE_IP }} || echo "Docker Swarm already initialized."

            echo "Retrieving Docker Swarm manager join token..."
            MANAGER_TOKEN=$(sudo docker swarm join-token -q manager)
            if [ -z "$MANAGER_TOKEN" ]; then
              echo "Failed to retrieve Docker Swarm manager join token."
              rm -f /root/setup.env
              exit 1
            fi

            echo "Saving manager token to Infisical..."
            infisical secrets set DOCKER_SWARM_MANAGER_TOKEN="$MANAGER_TOKEN" --token "$INFISICAL_TOKEN" --projectId "$INFISICAL_PROJECT_ID"

            echo "Retrieving Docker Swarm CA Fingerprint..."
            CA_FINGERPRINT=$(sudo docker info --format '{{.Swarm.Cluster.TLSInfo.TrustRoot}}' | openssl x509 -noout -fingerprint -sha256 | sed 's/.*=//')
            if [ -z "$CA_FINGERPRINT" ]; then
              echo "Failed to retrieve Docker Swarm CA Fingerprint."
              rm -f /root/setup.env
              exit 1
            fi

            echo "Saving CA fingerprint to Infisical..."
            infisical secrets set DOCKER_SWARM_CA_FINGERPRINT="$CA_FINGERPRINT" --token "$INFISICAL_TOKEN" --projectId "$INFISICAL_PROJECT_ID"

            echo "Cleaning up temporary setup file..."
            rm -f /root/setup.env
