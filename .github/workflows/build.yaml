name: Build and Deploy Docker Image

on:
  workflow_dispatch:  # Allows manual triggering of this workflow
    inputs:
      service_name:
        description: 'Service name for the Docker image'
        required: true
        default: 'duke'
      docker_username:
        description: 'Docker Hub username'
        required: true
      docker_password:
        description: 'Docker Hub password'
        required: true
      infisical_client_id:
        description: 'Infisical Client ID'
        required: true
      infisical_client_secret:
        description: 'Infisical Client Secret'
        required: true
      project_id:
        description: 'Infisical Project ID'
        required: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build project
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release

      - name: Run tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --release

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ github.event.inputs.docker_username }}
          password: ${{ github.event.inputs.docker_password }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ github.event.inputs.docker_username }}/${{ github.event.inputs.service_name }}:latest
            ${{ github.event.inputs.docker_username }}/${{ github.event.inputs.service_name }}:${{ github.sha }}

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Install Infisical CLI
        run: |
          curl -1sLf 'https://dl.cloudsmith.io/public/infisical/infisical-cli/setup.deb.sh' | sudo -E bash
          sudo apt-get update && sudo apt-get install -y infisical

      - name: Verify Infisical CLI Installation
        run: |
          which infisical || { echo "Infisical CLI is not in the PATH"; exit 1; }
          infisical --version || { echo "Infisical CLI is not installed correctly."; exit 1; }

      - name: Initialize Docker Swarm and Save Tokens
        run: |
          # Initialize Docker Swarm
          docker swarm init --advertise-addr ${{ secrets.DO_DUKE_IP }}

          # Retrieve the Docker Swarm manager join token
          MANAGER_TOKEN=$(docker swarm join-token -q manager)
          echo "MANAGER_TOKEN=$MANAGER_TOKEN" >> $GITHUB_ENV

          # Obtain an Infisical Token
          INFISICAL_TOKEN=$(infisical login --method=universal-auth --client-id=${{ secrets.INFISICAL_MACHINE_IDENTITY_CLIENT_ID }} --client-secret=${{ secrets.INFISICAL_MACHINE_IDENTITY_CLIENT_SECRET }} --plain --silent)
          echo "INFISICAL_TOKEN=$INFISICAL_TOKEN" >> $GITHUB_ENV

          # Save the manager token to Infisical
          infisical secrets set DOCKER_SWARM_MANAGER_TOKEN="$MANAGER_TOKEN" --token "$INFISICAL_TOKEN" --projectId ${{ secrets.PROJECT_ID }}

          # Retrieve the Docker Swarm CA Fingerprint
          CA_FINGERPRINT=$(docker info --format '{{.Swarm.Cluster.TLSInfo.TrustRoot}}' | openssl x509 -noout -fingerprint -sha256 | sed 's/.*=//')
          echo "CA_FINGERPRINT=$CA_FINGERPRINT" >> $GITHUB_ENV

          # Save the CA fingerprint to Infisical
          infisical secrets set DOCKER_SWARM_CA_FINGERPRINT="$CA_FINGERPRINT" --token "$INFISICAL_TOKEN" --projectId ${{ secrets.PROJECT_ID }}

          # Create Docker network named 'hyperion'
          docker network inspect hyperion >/dev/null 2>&1 || docker network create --driver overlay hyperion
