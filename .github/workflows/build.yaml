name: Build and Deploy Docker Image

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build project
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release

      - name: Run tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --release

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/duke:latest
            ${{ secrets.DOCKER_HUB_USERNAME }}/duke:${{ github.sha }}

  deploy:
      runs-on: ubuntu-latest
      needs: build
      steps:
        - name: Deploy to DigitalOcean Droplet
          uses: appleboy/ssh-action@master
          with:
            host: ${{ secrets.DO_DUKE_IP }}
            username: root
            password: ${{ secrets.DUKE_ROOT_PASSWORD }}
            script: |
              docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/duke:${{ github.sha }}
              docker stop duke || true
              docker rm duke || true

              # Find an open port starting from 8080
              PORT=8080
              while lsof -i :$PORT; do
                echo "Port $PORT is in use, trying the next one..."
                PORT=$((PORT+1))
              done

              echo "Starting Duke container on port $PORT..."
              docker run -d -p $PORT:8080 --name duke -e RUST_BACKTRACE=full ${{ secrets.DOCKER_HUB_USERNAME }}/duke:${{ github.sha }}

              # Verify that the Duke container is running
              sleep 5
              if [ $(docker ps -q -f name=duke) ]; then
                echo "Duke container is running successfully on port $PORT."
                docker logs duke
              else
                echo "Duke container failed to start. Here are the logs:"
                docker logs duke
                echo "Container status:"
                docker inspect duke
                exit 1
              fi

        - name: Initialize Docker Swarm
          run: docker swarm init --advertise-addr ${{ secrets.DO_DUKE_IP }}
              MANAGER_TOKEN=$(docker swarm join-token -q manager)
              infisical secrets set DOCKER_SWARM_MANAGER_TOKEN="$MANAGER_TOKEN" --token $INFISICAL_TOKEN --projectId ${{ secrets.PROJECT_ID }}
              CA_FINGERPRINT=$(docker info --format '{{.Swarm.Cluster.TLSInfo.TrustRoot}}' | openssl x509 -noout -fingerprint -sha256 | sed 's/.*=//')
              infisical secrets set DOCKER_SWARM_CA_FINGERPRINT="$CA_FINGERPRINT" --token $INFISICAL_TOKEN --projectId ${{ secrets.PROJECT_ID }}
              docker network inspect hyperion >/dev/null 2>&1 || docker network create --driver overlay hyperion