name: Build and Deploy Docker Image

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      service_name:
        description: 'Service name for the Docker image'
        required: true
        default: 'duke'
      docker_username:
        description: 'Docker Hub username'
        required: true
      docker_password:
        description: 'Docker Hub password'
        required: true
      infisical_client_id:
        description: 'Infisical Client ID'
        required: true
      infisical_client_secret:
        description: 'Infisical Client Secret'
        required: true
      project_id:
        description: 'Infisical Project ID'
        required: true

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}    # ${{ github.event.inputs.DOCKER_USERNAME }}
      PASSWORD: ${{ secrets.DOCKER_HUB_PASSWORD }}    # ${{ github.event.inputs.DOCKER_PASSWORD }}
      SERVICE_NAME: ${{ github.event.inputs.service_name || 'duke' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build project
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release

      - name: Run tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --release

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ env.USERNAME }}
          password: ${{ env.PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ env.USERNAME }}/${{ env.SERVICE_NAME }}:latest
            ${{ env.USERNAME }}/${{ env.SERVICE_NAME }}:${{ github.sha }}

  deploy:
    runs-on: ubuntu-latest
    needs: build
    env:
      USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}    # ${{ github.event.inputs.DOCKER_USERNAME }}
      INFISICAL_MACHINE_IDENTITY_CLIENT_ID: ${{ secrets.INFISICAL_MACHINE_IDENTITY_CLIENT_ID }}
      INFISICAL_MACHINE_IDENTITY_CLIENT_SECRET: ${{ secrets.INFISICAL_MACHINE_IDENTITY_CLIENT_SECRET }}
      INFISICAL_PROJECT_ID: ${{ secrets.PROJECT_ID }}
      SERVICE_NAME: ${{ github.event.inputs.service_name || 'duke' }}

    steps:
      - name: Install Infisical CLI
        run: |
          echo "Installing Infisical CLI..."
          curl -1sLf 'https://dl.cloudsmith.io/public/infisical/infisical-cli/setup.deb.sh' | sudo -E bash
          sudo apt-get update && sudo apt-get install -y infisical
          infisical --version
          echo "Infisical CLI installed successfully."

      - name: Infisical Login
        run: |
          echo "Logging into Infisical..."
          INFISICAL_TOKEN=$(infisical login --method=universal-auth --client-id=$INFISICAL_MACHINE_IDENTITY_CLIENT_ID --client-secret=$INFISICAL_MACHINE_IDENTITY_CLIENT_SECRET --plain --silent)
          echo "INFISICAL_TOKEN=$INFISICAL_TOKEN" >> $GITHUB_ENV
          if [ -z "$INFISICAL_TOKEN" ]; then
            echo "Infisical login failed. Exiting..."
            exit 1
          fi

      - name: Pull Docker Image
        run: |
          echo "Pulling the latest Docker image..."
          sudo docker pull ${{ env.USERNAME }}/${{ env.SERVICE_NAME }}:latest
  
      - name: Stop and Remove Existing Container
        run: |
          echo "Stopping and removing existing Docker container..."
          sudo docker stop ${{ env.SERVICE_NAME }} || true
          sudo docker rm ${{ env.SERVICE_NAME }} || true
  
      - name: Deploy Docker Container
        run: |
          echo "Deploying new Docker container..."
          sudo docker run -d --name ${{ env.SERVICE_NAME }} --network hyperion -p 8080:8080 ${{ env.USERNAME }}/${{ env.SERVICE_NAME }}:latest

      - name: Initialize Docker Swarm and Save Tokens
        run: |
          echo "Leave Existing Swarm if any..."
          sudo docker swarm leave --force || true  # Allow script to continue if not part of a swarm
          echo "Initializing Docker Swarm..."
          sudo docker swarm init --advertise-addr ${{ secrets.DO_DUKE_IP }} || echo "Docker Swarm already initialized."
          
          echo "Retrieving Docker Swarm manager join token..."
          MANAGER_TOKEN=$(sudo docker swarm join-token -q manager)
          if [ -z "$MANAGER_TOKEN" ]; then
            echo "Failed to retrieve Docker Swarm manager join token."
            exit 1
          fi
          echo "MANAGER_TOKEN=$MANAGER_TOKEN" >> $GITHUB_ENV

          echo "Saving manager token to Infisical..."
          infisical secrets set DOCKER_SWARM_MANAGER_TOKEN="$MANAGER_TOKEN" --token "$INFISICAL_TOKEN" --projectId $INFISICAL_PROJECT_ID

          echo "Retrieving Docker Swarm CA Fingerprint..."
          CA_FINGERPRINT=$(sudo docker info --format '{{.Swarm.Cluster.TLSInfo.TrustRoot}}' | openssl x509 -noout -fingerprint -sha256 | sed 's/.*=//')
          if [ -z "$CA_FINGERPRINT" ]; then
            echo "Failed to retrieve Docker Swarm CA Fingerprint."
            exit 1
          fi
          echo "CA_FINGERPRINT=$CA_FINGERPRINT" >> $GITHUB_ENV

          echo "Saving CA fingerprint to Infisical..."
          infisical secrets set DOCKER_SWARM_CA_FINGERPRINT="$CA_FINGERPRINT" --token "$INFISICAL_TOKEN" --projectId $INFISICAL_PROJECT_ID

          echo "Creating Docker network named 'hyperion'..."
          if sudo docker network inspect hyperion >/dev/null 2>&1; then
            echo "Docker network 'hyperion' already exists."
          else
            sudo docker network create --driver overlay hyperion
            echo "Docker network 'hyperion' created."
          fi